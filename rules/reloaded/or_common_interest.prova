:- eval(server()).

server() :-
    println(["==========Find music concerts that are a common interest=========="]),
	loadHisInterests(HisInterests),
	loadHerInterests(HerInterests),
	println(["HisInterests = ", HisInterests]),
	println(["HerInterests = ", HerInterests]),
	% This is not a member of any reaction group
	@count(-1)
	rcvMsg(XID, async, From, inform, {id->ID1,url->URL1, pos->POS1}),
	server_1(XID,{id->ID1,url->URL1, pos->POS1},HisInterests, HerInterests).

server_1(XID,{id->ID1,url->URL1, pos-> POS1},HisInterests,HerInterests) :-
	% Admittedly, using a reaction group here is an overkill but it allows easier extension to more interesting event combinations.
	% size(1,1) allows for multiple patterns to be emitted for each earlier event passed here as second parameter.
	@group(g1) @size(1,1) 
	rcvMsg(XID, async, From, inform, {id->ID2,url->URL2, pos-> POS2}) [ID1<ID2, interesting(URL1, URL2, HisInterests, HerInterests), POS1=POS2].
 server_1(XID,E1,HisInterests,HerInterests):-
	@or(g1) @timeout(9)
	rcvMsg(XID,Protocol,From,or,Events),
	println(["Pattern detected: ", E1, " ", Events]).	

loadHisInterests(Agent):-
	Agent=['Pink_Floyd', 'The_Framework', 'The_Rocky_Horror_Picture_Show'].

loadHerInterests(Agent):-
	Agent=['Procol_Harum', 'Deep_Purple'].

   
    
% Event Generator Client 
:- eval(client()). 

client() :- 
	% Send all the test messages from a separate thread
	switch_thread(),
	sendMsg(a,async,0,inform, {id->1, url->'The_Rocky_Horror_Picture_Show', pos->1 }), % his interest
	sendMsg(a,async,0,inform, {id->1, url->'Pink_Floyd', pos->1}),   % his interest
	sendMsg(a,async,0,inform, {id->1, url->'The_Framework', pos->1}), % his interest
	sendMsg(a,async,0,inform, {id->2, url->'Deep_Purple', pos->2 }),  % her interest
	sendMsg(a,async,0,inform, {id->2, url->'Deep_Purple', pos->2}),   % her interest
	sendMsg(a,async,0,inform, {id->2, url->'Genesis', pos->1}) ,      % NOT her interest
	sendMsg(a,async,0,inform, {id->2, url->'Procol_Harum', pos->1}),  % her interest
	sendMsg(a,async,0,inform, {id->1, url->'The_Framework', pos->1}). % his interest
	
switch_thread() :-
   sendMsgSync(XID,task,0,switch,[]),
   rcvMsg(XID,task,From,switch,[]).
	
interesting(URL1, URL2, HisInterests, HerInterests) :-
	member(URL1, HisInterests),
	member(URL2, HerInterests). 

member(X, [X|_]) :- !.                         
member(X, [_|Tail]) :- member(X, Tail).