:- eval(server()).

server() :-
    println(["==========Find music concerts that are a common interest=========="]),
	rcvMsg(XID, async, From, inform, {url->URL1}),
	server_1(XID,{id->ID1,url->URL1}).

server_1(XID,{id->ID1,url->URL1}) :-
	@group(g1) @size(1,1)
	rcvMsg(XID, async, From, inform, {url->URL2}) [interesting(URL1, URL2)].

server_1(XID,E1,HisInterests,HerInterests):-
	@or(g1)
	rcvMsg(XID,Protocol,From,or,Events),
	println(["Pattern detected: ", E1, " ", Events]).	


interesting(URL1, URL2):- 


testSparqlEPAndReplacement(Predicate, URL1, URL2) :-
   QueryString = '
     ASK {
          $s $p $o .
        }
   ',
   sparql_select(QueryString, Id, [s(URL1),p(Predicate), o(URL2)], "http://dbpedia.org/sparql"),
   sparql_results(Id, Predicate, Object).





% Event Generator Client
:- eval(client()). 

client() :-
	% Send all the test messages from a separate thread
	switch_thread(),
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/The_Rocky_Horror_Picture_Show'}),
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/Pink_Floyd'}),   
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/The_Framework'}), 
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/Deep_Purple'}),   
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/Genesis'}),
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/Procol_Harum'}),  
	sendMsg(a,async,0,inform, {url->'http://dbpedia.org/resource/The_Framework'}).
	
switch_thread() :-
   sendMsgSync(XID,task,0,switch,[]),
   rcvMsg(XID,task,From,switch,[]).
	
interesting(URL, URL2, HisInterests, HerInterests) :-
	member(URL, HisInterests),
	member(URL2, HerInterests). 

member(X, [X|_]).
member(X, [_|Tail]) :- member(X, Tail).